service: archeravenue-api
package:
  individually: true
  exclude:
    - node_modules/**
    - test/**
    - env.json
    - dist/**
    - src/**
    - addUser.js
frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  logRetentionInDays: 3 # Set the default RetentionInDays for a CloudWatch LogGroup
  apiKeys:
    - archerave_${opt:stage}
  region: ${opt:region, 'us-east-1'}
  profile: ${opt:profile}
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${file(./env.json):NODE_ENV}
    LOGIN_TABLE: Login-${self:provider.stage}
    ENGINEER_TABLE: Engineer-${self:provider.stage}
    GEAR_TABLE: Gear-${self:provider.stage}
    UPLOAD_BUCKET: acheravenue-upload-${self:provider.stage}
    HASH_STRING: ${file(./env.json):HASH_STRING}
    JWT_SECRET: ${file(./env.json):JWT_SECRET}
    TOKEN_NAME: ${file(./env.json):TOKEN_NAME}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: '*'
    - Effect: Allow
      Action:
        - ses:*
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:ListBuckets
        - s3:PutObject
        - s3:ListObjects
        - s3:GetObject
      Resource: '*'

# --------------------------- functions --------------------------- #
functions:
# ---- email ---- #
  mail:
    handler: dist/mail.mail
    package:
      include:
        - dist/toolbox/*
        - dist/mail.js
        - node_modules/**
    environment:
     TO_EMAIL: ${file(./env.json):TO_EMAIL}
     FROM_EMAIL: ${file(./env.json):FROM_EMAIL}
    events:
      - http:
          path: /mail
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          private: true

# ----- logins ----- #
  login:
    handler: dist/login.login
    package:
      include:
        - dist/toolbox/*
        - dist/login.js
        - node_modules/**
    environment:
      HASH_STRING: ${file(./env.json):HASH_STRING}
      JWT_SECRET: ${file(./env.json):JWT_SECRET}
      TOKEN_NAME: ${file(./env.json):TOKEN_NAME}
    events:
      - http:
          path: /login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          private: true

  changePassword:
    handler: dist/login.changePassword
    package:
      include:
        - dist/login.js
        - node_modules/**
        - dist/toolbox/**      
    events:
      - http:
          path: /changepassword
          method: patch
          cors:
            origin: '*'
            headers:
              - Context-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - x-Amx-User-Agent
            allowCredentials: true
          private: true

# ----- engineers ------ #
  getEngineers:
    handler: dist/engineer.getEngineers
    package:
      include:
        - dist/engineer.js
        - node_modules/**
        - dist/toolbox/**
    events:
      - http:
          path: /engineers
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true

  updateEngineer:
    handler: dist/engineer.updateEngineer
    package:
      include:
        - dist/engineer.js
        - dist/toolbox/**
        - node_modules/**
    events:
      - http:
          path: /engineers
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true

  getGear:
    handler: dist/gear.getGear
    package:
      include:
        - dist/gear.js
        - dist/toolbox/**
        - node_modules/**
    events:
      - http:
          path: /gear
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true

# ------ gear ------- #
  addGear:
    handler: dist/gear.addGear
    package:
      include:
        - dist/gear.js
        - dist/toolbox/**
        - node_modules/**
    events:
      - http:
          path: /gear
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true

  updateGear:
    handler: dist/gear.updateGear
    package:
      include:
        - dist/gear.js
        - dist/toolbox/**
        - node_modules/**
    events:
      - http:
          path: /gear
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true

  deleteGear:
    handler: dist/gear.deleteGear
    package:
      include:
        - dist/gear.js
        - dist/toolbox/**
        - node_modules/**
    events:
      - http:
          path: /gear
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true

# ------ uploads ---- #
  uploadFile:
    handler: dist/upload.uploadFile
    package:
      - dist/upload.js
      - dist/toolbox/**
      - node_modules/**
    events:
      - http:
          path: /upload
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amx-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Z-Amx-User-Agent
            allowCredentials: true
          private: true


# -------------------------- Resources -------------------------- #
resources:
  Resources:
    LoginTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: "S"
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        TableName: Login-${self:provider.stage}
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    EngineerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: lastName
            AttributeType: 'S'
          - AttributeName: firstName
            AttributeType: 'S'
        KeySchema:
          - AttributeName: lastName
            KeyType: HASH
          - AttributeName: firstName
            KeyType: RANGE
        TableName: Engineer-${self:provider.stage}
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    GearTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: 'S'
          - AttributeName: type
            AttributeType: 'S'
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        TableName: Gear-${self:provider.stage}
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: acheravenue-upload-${self:provider.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - POST
                - PUT
                - DELETE
              AllowedOrigins:
                - '*'
              MaxAge: 300

  Outputs:
    LoginTable:
      Value:
        'Ref': LoginTable
      Export:
        Name: Login-${self:provider.stage}

    EngineerTable:
      Value:
        'Ref': EngineerTable
      Export:
        Name: Engineer-${self:provider.stage}

    GearTable:
      Value:
        'Ref': GearTable
      Export:
        Name: Gear-${self:provider.stage}

    UploadBucket:
      Description: 'Arn of the upload bucket'
      Value:
        'Fn::GetAtt': [ UploadBucket, Arn ]
      Export:
        Name: ${self:service}:${opt:stage}:UploadBucketArn
